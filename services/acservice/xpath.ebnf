[1] XPath ::= Expr
[2] ParamList ::= Param ("," Param)*
[3] Param ::= "$" EQName TypeDeclaration?
[4] FunctionBody ::= EnclosedExpr
[5] EnclosedExpr ::= "{" Expr? "}"
[6] Expr ::= ExprSingle ("," ExprSingle)*
[7] ExprSingle ::= ForExpr | LetExpr | QuantifiedExpr | IfExpr | OrExpr
[8] ForExpr ::= SimpleForClause "return" ExprSingle
[9] SimpleForClause ::= "for" SimpleForBinding ("," SimpleForBinding)*
[10] SimpleForBinding ::= "$" VarName "in" ExprSingle
[11] LetExpr ::= SimpleLetClause "return" ExprSingle
[12] SimpleLetClause ::= "let" SimpleLetBinding ("," SimpleLetBinding)*
[13] SimpleLetBinding ::= "$" VarName ":=" ExprSingle
[14] QuantifiedExpr ::= ("some" | "every") "$" VarName "in" ExprSingle ("," "$" VarName "in" ExprSingle)* "satisfies" ExprSingle
[15] IfExpr ::= "if" "(" Expr ")" "then" ExprSingle "else" ExprSingle
[16] OrExpr ::= AndExpr ( "or" AndExpr )*
[17] AndExpr ::= ComparisonExpr ( "and" ComparisonExpr )*
[18] ComparisonExpr ::= StringConcatExpr ( (ValueComp | GeneralComp | NodeComp) StringConcatExpr )?
[19] StringConcatExpr ::= RangeExpr ( "||" RangeExpr )*
[20] RangeExpr ::= AdditiveExpr ( "to" AdditiveExpr )?
[21] AdditiveExpr ::= MultiplicativeExpr ( ("+" | "-") MultiplicativeExpr )*
[22] MultiplicativeExpr ::= UnionExpr ( ("*" | "div" | "idiv" | "mod") UnionExpr )*
[23] UnionExpr ::= IntersectExceptExpr ( ("union" | "|") IntersectExceptExpr )*
[24] IntersectExceptExpr ::= InstanceofExpr ( ("intersect" | "except") InstanceofExpr )*
[25] InstanceofExpr ::= TreatExpr ( "instance" "of" SequenceType )?
[26] TreatExpr ::= CastableExpr ( "treat" "as" SequenceType )?
[27] CastableExpr ::= CastExpr ( "castable" "as" SingleType )?
[28] CastExpr ::= ArrowExpr ( "cast" "as" SingleType )?
[29] ArrowExpr ::= UnaryExpr ( "=>" ArrowFunctionSpecifier ArgumentList )*
[30] UnaryExpr ::= ("-" | "+")* ValueExpr
[31] ValueExpr ::= SimpleMapExpr
[32] GeneralComp ::= "=" | "!=" | "<" | "<=" | ">" | ">="
[33] ValueComp ::= "eq" | "ne" | "lt" | "le" | "gt" | "ge"
[34] NodeComp ::= "is" | "<<" | ">>"
[35] SimpleMapExpr ::= PathExpr ("!" PathExpr)*
[36] PathExpr ::= ("/" RelativePathExpr?)| ("//" RelativePathExpr)| RelativePathExpr /* xgc: leading-lone-slash */
[37] RelativePathExpr ::= StepExpr (("/" | "//") StepExpr)*
[38] StepExpr ::= PostfixExpr | AxisStep
[39] AxisStep ::= (ReverseStep | ForwardStep) PredicateList
[40] ForwardStep ::= (ForwardAxis NodeTest) | AbbrevForwardStep
[41] ForwardAxis ::= ("child" "::")| ("descendant" "::")| ("attribute" "::")| ("self" "::")| ("descendant-or-self" "::")| ("following-sibling" "::")| ("following" "::")| ("namespace" "::")
[42] AbbrevForwardStep ::= "@"? NodeTest
[43] ReverseStep ::= (ReverseAxis NodeTest) | AbbrevReverseStep
[44] ReverseAxis ::= ("parent" "::")| ("ancestor" "::")| ("preceding-sibling" "::")| ("preceding" "::")| ("ancestor-or-self" "::")
[45] AbbrevReverseStep ::= ".."
[46] NodeTest ::= KindTest | NameTest
[47] NameTest ::= EQName | Wildcard
[48] Wildcard ::= "*"| (NCName ":*")| ("*:" NCName)| (BracedURILiteral "*") /* ws: explicit */
[49] PostfixExpr ::= PrimaryExpr (Predicate | ArgumentList | Lookup)*
[50] ArgumentList ::= "(" (Argument ("," Argument)*)? ")"
[51] PredicateList ::= Predicate*
[52] Predicate ::= "[" Expr "]"
[53] Lookup ::= "?" KeySpecifier
[54] KeySpecifier ::= NCName | IntegerLiteral | ParenthesizedExpr | "*"
[55] ArrowFunctionSpecifier ::= EQName | VarRef | ParenthesizedExpr
[56] PrimaryExpr ::= Literal | VarRef | ParenthesizedExpr | ContextItemExpr | FunctionCall | FunctionItemExpr | MapConstructor | ArrayConstructor | UnaryLookup
[57] Literal ::= NumericLiteral | StringLiteral
[58] NumericLiteral ::= IntegerLiteral | DecimalLiteral | DoubleLiteral
[59] VarRef ::= "$" VarName
[60] VarName ::= EQName
[61] ParenthesizedExpr ::= "(" Expr? ")"
[62] ContextItemExpr ::= "."
[63] FunctionCall ::= EQName ArgumentList /* xgc: reserved-function-names */ /* gn: parens */
[64] Argument ::= ExprSingle | ArgumentPlaceholder
[65] ArgumentPlaceholder ::= "?"
[66] FunctionItemExpr ::= NamedFunctionRef | InlineFunctionExpr
[67] NamedFunctionRef ::= EQName "#" IntegerLiteral /* xgc: reserved-function-names */
[68] InlineFunctionExpr ::= "function" "(" ParamList? ")" ("as" SequenceType)? FunctionBody
[69] MapConstructor ::= "map" "{" (MapConstructorEntry ("," MapConstructorEntry)*)? "}"
[70] MapConstructorEntry ::= MapKeyExpr ":" MapValueExpr
[71] MapKeyExpr ::= ExprSingle
[72] MapValueExpr ::= ExprSingle
[73] ArrayConstructor ::= SquareArrayConstructor | CurlyArrayConstructor
[74] SquareArrayConstructor ::= "[" (ExprSingle ("," ExprSingle)*)? "]"
[75] CurlyArrayConstructor ::= "array" EnclosedExpr
[76] UnaryLookup ::= "?" KeySpecifier
[77] SingleType ::= SimpleTypeName "?"?
[78] TypeDeclaration ::= "as" SequenceType
[79] SequenceType ::= ("empty-sequence" "(" ")")| (ItemType OccurrenceIndicator?)
[80] OccurrenceIndicator ::= "?" | "*" | "+" /* xgc: occurrence-indicators */
[81] ItemType ::= KindTest | ("item" "(" ")") | FunctionTest | MapTest | ArrayTest | AtomicOrUnionType | ParenthesizedItemType
[82] AtomicOrUnionType ::= EQName
[83] KindTest ::= DocumentTest | ElementTest | AttributeTest | SchemaElementTest | SchemaAttributeTest | PITest | CommentTest | TextTest | NamespaceNodeTest | AnyKindTest
[84] AnyKindTest ::= "node" "(" ")"
[85] DocumentTest ::= "document-node" "(" (ElementTest | SchemaElementTest)? ")"
[86] TextTest ::= "text" "(" ")"
[87] CommentTest ::= "comment" "(" ")"
[88] NamespaceNodeTest ::= "namespace-node" "(" ")"
[89] PITest ::= "processing-instruction" "(" (NCName | StringLiteral)? ")"
[90] AttributeTest ::= "attribute" "(" (AttribNameOrWildcard ("," TypeName)?)? ")"
[91] AttribNameOrWildcard ::= AttributeName | "*"
[92] SchemaAttributeTest ::= "schema-attribute" "(" AttributeDeclaration ")"
[93] AttributeDeclaration ::= AttributeName
[94] ElementTest ::= "element" "(" (ElementNameOrWildcard ("," TypeName "?"?)?)? ")"
[95] ElementNameOrWildcard ::= ElementName | "*"
[96] SchemaElementTest ::= "schema-element" "(" ElementDeclaration ")"
[97] ElementDeclaration ::= ElementName
[98] AttributeName ::= EQName
[99] ElementName ::= EQName
[100] SimpleTypeName ::= TypeName
[101] TypeName ::= EQName
[102] FunctionTest ::= AnyFunctionTest | TypedFunctionTest
[103] AnyFunctionTest ::= "function" "(" "*" ")"
[104] TypedFunctionTest ::= "function" "(" (SequenceType ("," SequenceType)*)? ")" "as" SequenceType
[105] MapTest ::= AnyMapTest | TypedMapTest
[106] AnyMapTest ::= "map" "(" "*" ")"
[107] TypedMapTest ::= "map" "(" AtomicOrUnionType "," SequenceType ")"
[108] ArrayTest ::= AnyArrayTest | TypedArrayTest
[109] AnyArrayTest ::= "array" "(" "*" ")"
[110] TypedArrayTest ::= "array" "(" SequenceType ")"
[111] ParenthesizedItemType ::= "(" ItemType ")"
[112] EQName ::= QName | URIQualifiedName
